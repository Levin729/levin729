from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging
import sqlite3
from datetime import datetime
import uuid
import qrcode
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '8124873152:AAELTs1pl1b6EFvVii7wKw9MlGEjHlfvecg'  # –í–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 977794402  # –í–∞—à ID –≤ Telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def log_user_action(user: types.User, action: str):
    username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"
    fullname = f"{user.first_name or ''} {user.last_name or ''}".strip()
    logging.info(f"[{user.id}] {username} ({fullname}) ‚Äî {action}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# ================== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô ==================
class OrderStates(StatesGroup):
    waiting_for_mode = State()
    waiting_for_mmr_from = State()
    waiting_for_mmr_to = State()
    waiting_for_doubles_choice = State()
    waiting_for_doubles = State()
    waiting_for_behavior_score = State()
    waiting_for_hours = State()
    waiting_for_coaching_hours = State()
    waiting_for_battle_cup_mode = State()
    waiting_for_battle_cup_tier = State()
    waiting_for_battle_cup_confirmation = State()
    waiting_for_calibration_mmr = State()
    waiting_for_calibration_confidence = State()

class PaymentStates(StatesGroup):
    waiting_for_payment_method = State()
    waiting_for_confirmation = State()
    waiting_for_screenshot = State()

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
def get_db():
    logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect('orders.db')
    conn.row_factory = sqlite3.Row
    logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    return conn

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_db_schema():
    logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute('PRAGMA table_info(orders)')
            columns = {row['name'] for row in cursor.fetchall()}
            
            if 'mode' not in columns:
                db.execute('ALTER TABLE orders ADD COLUMN mode TEXT DEFAULT NULL')
            
            if 'games' not in columns:
                db.execute('ALTER TABLE orders ADD COLUMN games INTEGER DEFAULT NULL')
            
            if 'doubles_used' not in columns:
                db.execute('ALTER TABLE orders ADD COLUMN doubles_used INTEGER DEFAULT 0')
            
            if 'tier' not in columns:
                db.execute('ALTER TABLE orders ADD COLUMN tier INTEGER DEFAULT NULL')
            
            if 'confidence' not in columns:
                db.execute('ALTER TABLE orders ADD COLUMN confidence INTEGER DEFAULT NULL')
            
            db.commit()
        logging.info("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
def update_payment_table():
    logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π...")
    try:
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS payments
                     (id TEXT PRIMARY KEY,
                      order_id INTEGER,
                      user_id INTEGER,
                      amount REAL,
                      method TEXT,
                      status TEXT DEFAULT 'pending',
                      payment_data TEXT,
                      screenshot_file_id TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
            db.commit()
        logging.info("–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with get_db() as db:
    cursor = db.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  mmr_from INTEGER,
                  mmr_to INTEGER,
                  mode TEXT,
                  games INTEGER,
                  doubles_used INTEGER DEFAULT 0,
                  price REAL,
                  status TEXT DEFAULT 'new',
                  payment_status TEXT DEFAULT 'pending',
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  tier INTEGER DEFAULT NULL,
                  confidence INTEGER DEFAULT NULL)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS reviews
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  text TEXT,
                  rating INTEGER,
                  order_id INTEGER,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    db.commit()
update_db_schema()
update_payment_table()

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]
    ],
    resize_keyboard=True
)

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üéØ –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç"), types.KeyboardButton(text="‚è± –û—Ç—ã–≥—Ä—ã—à —á–∞—Å–æ–≤")],
        [types.KeyboardButton(text="üéì –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞"), types.KeyboardButton(text="üë®‚Äçüè´ –ö–æ—É—á–∏–Ω–≥")],
        [types.KeyboardButton(text="üèÜ –ë–æ–µ–≤–æ–π –∫—É–±–æ–∫"), types.KeyboardButton(text="üí∞ –¶–µ–Ω—ã")],
        [types.KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), types.KeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã")],
        [types.KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), types.KeyboardButton(text="üõ°Ô∏è –û—Ç–º—ã–≤–∞ –ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏")]
    ],
    resize_keyboard=True
)

mode_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–°–æ–ª–æ"), types.KeyboardButton(text="–ü–∞—Ç–∏")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

mmr_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

doubles_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

behavior_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

hours_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

coaching_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

tier_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="3"), types.KeyboardButton(text="4")],
        [types.KeyboardButton(text="5"), types.KeyboardButton(text="6")],
        [types.KeyboardButton(text="7"), types.KeyboardButton(text="8")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

confidence_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

confirm_battle_cup_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
payment_navigation_kb = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
def get_payment_methods_keyboard(order_id, total_price):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåü Telegram Stars", callback_data=f"pay_stars_{order_id}_{total_price}")],
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data=f"pay_card_{order_id}_{total_price}")],
            [InlineKeyboardButton(text="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT)", callback_data=f"pay_crypto_{order_id}_{total_price}")],
            [InlineKeyboardButton(text="üì± QIWI", callback_data=f"pay_qiwi_{order_id}_{total_price}")],
            [InlineKeyboardButton(text="ü§ù –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", callback_data=f"pay_other_{order_id}_{total_price}")],
        ]
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ID –ø–ª–∞—Ç–µ–∂–∞
def generate_payment_id():
    return str(uuid.uuid4())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
def calculate_calibration_progress(confidence):
    initial_confidence = 7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    target_confidence = 30  # –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    total_games = 15  # –í—Å–µ–≥–æ –∏–≥—Ä –≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ
    
    if confidence < initial_confidence:
        confidence = initial_confidence
    
    games_played = round((confidence - initial_confidence) / 1.5)  # 1.5% –∑–∞ –∏–≥—Ä—É
    games_remaining = total_games - games_played
    current_confidence = confidence
    
    return games_remaining, current_confidence

# ================== –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –¶–ï–ù ==================
def get_price_per_game(mmr):
    solo_prices = [
        (1, 2000, 95), (2000, 3000, 115), (3000, 3500, 135), (3500, 4000, 160), (4000, 4500, 180),
        (4500, 5000, 240), (5000, 5500, 290), (5500, 6000, 350), (6000, 6500, 530), (6500, 7000, 615),
        (7000, 7500, 700), (7500, 8000, 780), (8000, 8500, 880), (8500, 9000, 1050), (9000, 9500, 1250),
        (9500, 10000, 1390), (10000, 10500, 1690), (10500, 11000, 1990), (11000, 11500, 2390),
        (11500, 12000, 2790), (12000, 12500, 3390), (12500, 13000, 3990), (13000, float('inf'), 4990)
    ]
    
    solo_price_per_100_mmr = next(price for start, end, price in solo_prices if start <= mmr < end)
    solo_price_per_game = solo_price_per_100_mmr / 4  # –¶–µ–Ω–∞ –∑–∞ 1 –∏–≥—Ä—É (—Å–æ–ª–æ)
    return solo_price_per_game

def calculate_boost_price(mmr_from, mmr_to, mode, doubles_available):
    mmr_gain = mmr_to - mmr_from
    if mmr_gain <= 0:
        return 0, 0, 0, "MMR –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è"
    
    games_without_doubles = mmr_gain // 25
    if mmr_gain % 25 != 0:
        games_without_doubles += 1
    
    games_with_doubles = mmr_gain // 50
    if mmr_gain % 50 != 0:
        games_with_doubles += 1
    
    doubles_used = min(doubles_available, games_with_doubles)
    remaining_mmr = mmr_gain - (doubles_used * 50)
    additional_games = remaining_mmr // 25 if remaining_mmr > 0 else 0
    if remaining_mmr % 25 != 0:
        additional_games += 1
    
    total_games = doubles_used + additional_games
    
    base_price_per_game = get_price_per_game(mmr_from)
    
    if mode == "solo":
        price_with_doubles = doubles_used * base_price_per_game * 0.75
        price_without_doubles = additional_games * base_price_per_game
        total_price = price_with_doubles + price_without_doubles
    else:  # mode == "party"
        party_base_price = base_price_per_game * 1.5
        price_with_doubles = doubles_used * party_base_price * 1.5
        price_without_doubles = additional_games * party_base_price
        total_price = price_with_doubles + price_without_doubles
    
    return total_price, total_games, doubles_used, None

def get_behavior_price(behavior_score):
    price_ranges = [
        (0, 3000, {('all_pick', False): 50, ('turbo', False): 25}),
        (3000, 9000, {('all_pick', False): 25, ('turbo', False): 12}),
        (9000, 12000, {('all_pick', False): 15, ('turbo', False): 7})
    ]
    base_increase = next(increase for start, end, increases in price_ranges if start <= behavior_score < end)
    return base_increase.get(('all_pick', False), 0) * 100  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞

def get_hours_price(hours):
    return hours * 300  # 300 —Ä—É–±/—á–∞—Å

def get_coaching_price(hours):
    return hours * 500  # 500 —Ä—É–±/—á–∞—Å

def get_battle_cup_price(tier, mode):
    base_prices = {
        8: 1375,  # –¢–∏—Ç–∞–Ω—ã
        7: 700,   # –ë–æ–∂–µ—Å—Ç–≤–æ
        6: 600,   # –í–ª–∞—Å—Ç–µ–ª–∏–Ω—ã
        5: 500,   # –õ–µ–≥–µ–Ω–¥—ã
        4: 400,   # –ì–µ—Ä–æ–∏
        3: 300    # –í—ã–¥–∞—Ä–∏ –∏ –Ω–∏–∂–µ
    }
    base_price = base_prices.get(tier, 300)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–∏—Ä–∞ 3
    return base_price if mode == "solo" else base_price * 1.5  # –ü–∞—Ç–∏ —Ö1.5

def determine_tier(mmr):
    if mmr <= 3000:
        return 3  # –í—ã–¥–∞—Ä–∏ –∏ –Ω–∏–∂–µ
    elif mmr <= 4000:
        return 4  # –ì–µ—Ä–æ–∏
    elif mmr <= 5000:
        return 5  # –õ–µ–≥–µ–Ω–¥—ã
    elif mmr <= 6000:
        return 6  # –í–ª–∞—Å—Ç–µ–ª–∏–Ω—ã
    elif mmr <= 9000:
        return 7  # –ë–æ–∂–µ—Å—Ç–≤–æ
    else:
        return 8  # –¢–∏—Ç–∞–Ω—ã

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã –≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –ø–æ Dota 2! üöÄ –•–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–¥–Ω—è—Ç—å MMR –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏? –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! üòé\n\n–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞—à–∏—Ö –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\nüîó https://funpay.com/users/3140450/\n\nüîó https://t.me/dotalevin729\n\n–í—ã–±–∏—Ä–∞–π —É—Å–ª—É–≥—É, –ø–∏—à–∏ –º–Ω–µ, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ—é –∏–≥—Ä—É –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–π! üí™ –ì–æ—Ç–æ–≤ –∫ –ø–æ–±–µ–¥–∞–º? üòè",
        reply_markup=start_kb
    )

@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@dp.message(F.text == "üí∞ –¶–µ–Ω—ã")
async def show_prices(message: types.Message):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—ã")
    prices_text = (
        "üíé <b>–¶–µ–Ω—ã –∑–∞ 1 –∏–≥—Ä—É (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç +25 MMR):</b>\n\n"
        "üìå <b>–°–æ–ª–æ (–±–µ–∑ –¥–∞–±–ª–æ–≤):</b>\n"
        "1-2000 MMR: 23.75 —Ä—É–±\n"
        "2000-3000 MMR: 28.75 —Ä—É–±\n"
        "3000-3500 MMR: 33.75 —Ä—É–±\n"
        "3500-4000 MMR: 40 —Ä—É–±\n"
        "4000-4500 MMR: 45 —Ä—É–±\n"
        "4500-5000 MMR: 60 —Ä—É–±\n"
        "5000-5500 MMR: 72.5 —Ä—É–±\n"
        "5500-6000 MMR: 87.5 —Ä—É–±\n"
        "6000-6500 MMR: 132.5 —Ä—É–±\n"
        "6500-7000 MMR: 153.75 —Ä—É–±\n"
        "7000-7500 MMR: 175 —Ä—É–±\n"
        "7500-8000 MMR: 195 —Ä—É–±\n"
        "8000-8500 MMR: 220 —Ä—É–±\n"
        "8500-9000 MMR: 262.5 —Ä—É–±\n"
        "9000-9500 MMR: 312.5 —Ä—É–±\n"
        "9500-10000 MMR: 347.5 —Ä—É–±\n"
        "10000-10500 MMR: 422.5 —Ä—É–±\n"
        "10500-11000 MMR: 497.5 —Ä—É–±\n"
        "11000-11500 MMR: 597.5 —Ä—É–±\n"
        "11500-12000 MMR: 697.5 —Ä—É–±\n"
        "12000-12500 MMR: 847.5 —Ä—É–±\n"
        "12500-13000 MMR: 997.5 —Ä—É–±\n"
        "13000+ MMR: 1247.5 —Ä—É–±\n\n"
        "üìå <b>–°–æ–ª–æ —Å –¥–∞–±–ª–∞–º–∏:</b> –°–∫–∏–¥–∫–∞ 25% –Ω–∞ –∏–≥—Ä—ã —Å –¥–∞–±–ª–∞–º–∏.\n\n"
        "üìå <b>–ü–∞—Ç–∏ (–±–µ–∑ –¥–∞–±–ª–æ–≤):</b>\n"
        "1-2000 MMR: 35.625 —Ä—É–±\n"
        "2000-3000 MMR: 43.125 —Ä—É–±\n"
        "3000-3500 MMR: 50.625 —Ä—É–±\n"
        "3500-4000 MMR: 60 —Ä—É–±\n"
        "4000-4500 MMR: 67.5 —Ä—É–±\n"
        "4500-5000 MMR: 90 —Ä—É–±\n"
        "5000-5500 MMR: 108.75 —Ä—É–±\n"
        "5500-6000 MMR: 131.25 —Ä—É–±\n"
        "6000-6500 MMR: 198.75 —Ä—É–±\n"
        "6500-7000 MMR: 230.625 —Ä—É–±\n"
        "7000-7500 MMR: 262.5 —Ä—É–±\n"
        "7500-8000 MMR: 292.5 —Ä—É–±\n"
        "8000-8500 MMR: 330 —Ä—É–±\n"
        "8500-9000 MMR: 393.75 —Ä—É–±\n"
        "9000-9500 MMR: 468.75 —Ä—É–±\n"
        "9500-10000 MMR: 521.25 —Ä—É–±\n"
        "10000-10500 MMR: 633.75 —Ä—É–±\n"
        "10500-11000 MMR: 746.25 —Ä—É–±\n"
        "11000-11500 MMR: 896.25 —Ä—É–±\n"
        "11500-12000 MMR: 1046.25 —Ä—É–±\n"
        "12000-12500 MMR: 1271.25 —Ä—É–±\n"
        "12500-13000 MMR: 1496.25 —Ä—É–±\n"
        "13000+ MMR: 1871.25 —Ä—É–±\n\n"
        "üìå <b>–ü–∞—Ç–∏ —Å –¥–∞–±–ª–∞–º–∏:</b> +50% –∫ —Ü–µ–Ω–µ –ø–∞—Ç–∏ –Ω–∞ –∏–≥—Ä—ã —Å –¥–∞–±–ª–∞–º–∏.\n\n"
        "üõ°Ô∏è <b>–û—Ç–º—ã–≤–∞ –ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏:</b>\n"
        "1-3000 MMR: +5000 (All Pick), +2500 (Turbo)\n"
        "3000-9000 MMR: +2500 (All Pick), +1200 (Turbo)\n"
        "9000-12000 MMR: +1500 (All Pick), +700 (Turbo)\n\n"
        "‚è± <b>–û—Ç—ã–≥—Ä—ã—à —á–∞—Å–æ–≤:</b>\n"
        "1 —á–∞—Å: 300 —Ä—É–±\n\n"
        "üéì <b>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</b>\n"
        "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (15 –∏–≥—Ä): 1500 —Ä—É–±\n\n"
        "üë®‚Äçüè´ <b>–ö–æ—É—á–∏–Ω–≥:</b>\n"
        "1 —á–∞—Å: 500 —Ä—É–±\n\n"
        "üèÜ <b>–ë–æ–µ–≤–æ–π –∫—É–±–æ–∫:</b>\n"
        "–°–æ–ª–æ:\n"
        "–¢–∏—Ä 3: 300 —Ä—É–±\n"
        "–¢–∏—Ä 4: 400 —Ä—É–±\n"
        "–¢–∏—Ä 5: 500 —Ä—É–±\n"
        "–¢–∏—Ä 6: 600 —Ä—É–±\n"
        "–¢–∏—Ä 7: 700 —Ä—É–±\n"
        "–¢–∏—Ä 8: 1375 —Ä—É–±\n"
        "–ü–∞—Ç–∏ (—Ö1.5 –æ—Ç —Å–æ–ª–æ):\n"
        "–¢–∏—Ä 3: 450 —Ä—É–±\n"
        "–¢–∏—Ä 4: 600 —Ä—É–±\n"
        "–¢–∏—Ä 5: 750 —Ä—É–±\n"
        "–¢–∏—Ä 6: 900 —Ä—É–±\n"
        "–¢–∏—Ä 7: 1050 —Ä—É–±\n"
        "–¢–∏—Ä 8: 2062.50 —Ä—É–±\n\n"
        "üì© –£–∑–Ω–∞–π —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É, –≤—ã–±—Ä–∞–≤ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞!"
    )
    await message.answer(prices_text, reply_markup=main_kb)

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    await message.answer(
        "üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:\n"
        "@levin729\n\n"
        "‚è± –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 10:00 - 22:00 (–ú–°–ö)",
        reply_markup=main_kb
    )

@dp.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: types.Message):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∑—ã–≤—ã")
    await message.answer(
        "‚≠ê <b>–û—Ç–∑—ã–≤—ã</b>\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ:\n"
        "<a href='https://t.me/dotalevin729'>@dotalevin729</a>\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤, –≤—ã–±—Ä–∞–≤ ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª.",
        reply_markup=main_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

# ================== –°–ò–°–¢–ï–ú–ê –ó–ê–ö–ê–ó–û–í ==================
@dp.message(F.text == "üéØ –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç")
async def order_start(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –±—É—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    mmr_image_url = "https://ru.files.fm/down.php?i=dxrjb59nkv"
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç: {mmr_image_url}")
    try:
        await message.answer_photo(
            photo=mmr_image_url,
            caption="üìä –í–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ MMR, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥.\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:",
            reply_markup=mode_kb
        )
        await state.set_state(OrderStates.waiting_for_mode)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç: {e}")
        await message.answer(
            "üìä –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ MMR. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ —Å—Å—ã–ª–∫–µ: https://ru.files.fm/down.php?i=dxrjb59nkv\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:",
            reply_markup=mode_kb
        )
        await state.set_state(OrderStates.waiting_for_mode)

@dp.message(StateFilter(OrderStates.waiting_for_mode))
async def select_mode(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞")
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if message.text not in ["–°–æ–ª–æ", "–ü–∞—Ç–∏"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (–°–æ–ª–æ/–ü–∞—Ç–∏) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.", reply_markup=mode_kb)
        return
    mode = "solo" if message.text.lower() == "—Å–æ–ª–æ" else "party"  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    await state.update_data(mode=mode)
    if mode == "party":
        await message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–±–ª –¥–∞—É–Ω—ã? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
        await state.set_state(OrderStates.waiting_for_doubles_choice)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=mmr_kb)
        await state.set_state(OrderStates.waiting_for_mmr_from)

@dp.message(StateFilter(OrderStates.waiting_for_doubles_choice))
async def process_doubles_choice(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–±–ª–æ–≤: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –¥–∞–±–ª–æ–≤")
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:", reply_markup=mode_kb)
        await state.set_state(OrderStates.waiting_for_mode)
        return
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.", reply_markup=yes_no_kb)
        return
    if message.text == "–î–∞":
        await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–∞–±–ª –¥–∞—É–Ω–æ–≤? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=doubles_kb)
        await state.set_state(OrderStates.waiting_for_doubles)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=mmr_kb)
        await state.set_state(OrderStates.waiting_for_mmr_from)

@dp.message(StateFilter(OrderStates.waiting_for_mmr_from), F.text.regexp(r'^\d{1,5}$'))
async def process_mmr_from(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π MMR –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        data = await state.get_data()
        if data.get("mode") == "–ø–∞—Ç–∏":
            await message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–±–ª –¥–∞—É–Ω—ã? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
            await state.set_state(OrderStates.waiting_for_doubles_choice)
        else:
            await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:", reply_markup=mode_kb)
            await state.set_state(OrderStates.waiting_for_mode)
        return
    try:
        mmr_from = int(message.text)
        if mmr_from < 1 or mmr_from > 13000:
            raise ValueError
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4000):", reply_markup=mmr_kb)
        await state.set_state(OrderStates.waiting_for_mmr_to)
        await state.update_data(mmr_from=mmr_from)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000).", reply_markup=mmr_kb)
        return

@dp.message(StateFilter(OrderStates.waiting_for_mmr_to), F.text.regexp(r'^\d{1,5}$'))
async def process_mmr_to(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω–µ—á–Ω—ã–π MMR –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=mmr_kb)
        await state.set_state(OrderStates.waiting_for_mmr_from)
        return
    try:
        mmr_to = int(message.text)
        data = await state.get_data()
        mmr_from = data["mmr_from"]
        mode = data["mode"]
        if mmr_to <= mmr_from:
            await message.answer("‚ùå –ñ–µ–ª–∞–µ–º—ã–π MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ.", reply_markup=mmr_kb)
            return

        # –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –∏ –∏–≥—Ä
        total_price, total_games, doubles_used, error = calculate_boost_price(mmr_from, mmr_to, mode, 0)
        if error:
            await message.answer(f"‚ùå {error}", reply_markup=mmr_kb)
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mmr_from, mmr_to, mode, games, doubles_used, price) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, mmr_from, mmr_to, mode, total_games, doubles_used, total_price)
            )
            db.commit()
            order_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"MMR: {mmr_from} ‚Üí {mmr_to}\n"
            f"–†–µ–∂–∏–º: {'–°–æ–ª–æ' if mode == 'solo' else '–ü–∞—Ç–∏'}\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price)
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000).", reply_markup=mmr_kb)
        return

@dp.message(StateFilter(OrderStates.waiting_for_doubles), F.text.regexp(r'^\d+$'))
async def process_doubles(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–±–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        if (await state.get_data()).get("mode") == "–ø–∞—Ç–∏":
            await message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–±–ª –¥–∞—É–Ω—ã? (–î–∞/–ù–µ—Ç)", reply_markup=yes_no_kb)
            await state.set_state(OrderStates.waiting_for_doubles_choice)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4000):", reply_markup=mmr_kb)
            await state.set_state(OrderStates.waiting_for_mmr_to)
        return
    try:
        doubles = int(message.text)
        if doubles < 0:
            raise ValueError
        data = await state.get_data()
        mmr_from, mmr_to, mode = data["mmr_from"], data["mmr_to"], data["mode"]
        
        total_price, total_games, doubles_used, error = calculate_boost_price(mmr_from, mmr_to, mode, doubles)
        if error:
            await message.answer(f"‚ùå {error}", reply_markup=doubles_kb)
            return
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mmr_from, mmr_to, mode, games, doubles_used, price) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, mmr_from, mmr_to, mode, total_games, doubles_used, total_price)
            )
            db.commit()
            order_id = cursor.lastrowid
        
        doubles_text = f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∞–±–ª–æ–≤: {doubles_used}" if doubles_used > 0 else ""
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"MMR: {mmr_from} ‚Üí {mmr_to}\n"
            f"–†–µ–∂–∏–º: {'–°–æ–ª–æ' if mode == 'solo' else '–ü–∞—Ç–∏'}\n"
            f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}{doubles_text}\n\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price),
            reply_markup_keyboard=payment_navigation_kb
        )
        
        await state.update_data(order_id=order_id, doubles=doubles)
        await state.set_state(PaymentStates.waiting_for_payment_method)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–±–ª–æ–≤ (—á–∏—Å–ª–æ >= 0).", reply_markup=doubles_kb)
        return

# ================== –û–¢–ú–´–í–ê –ü–û–†–Ø–î–û–ß–ù–û–°–¢–ò ==================
@dp.message(F.text == "üõ°Ô∏è –û—Ç–º—ã–≤–∞ –ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏")
async def order_behavior_score(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–∫–∞–∑ –æ—Ç–º—ã–≤–∫–∏ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏")
    behavior_image_url = "https://ru.files.fm/down.php?i=njkuubrw4z"
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –û—Ç–º—ã–≤–∞ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏: {behavior_image_url}")
    try:
        await message.answer_photo(
            photo=behavior_image_url,
            caption=(
                "üìã <b>–ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å</b>\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ.\n"
                "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–º—ã–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º —É—Å–ª—É–≥–∞–º).\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3000):"
            ),
            reply_markup=behavior_kb
        )
        await state.set_state(OrderStates.waiting_for_behavior_score)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –û—Ç–º—ã–≤–∞ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏: {e}")
        await message.answer(
            "üìã <b>–ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –ø–æ —Å—Å—ã–ª–∫–µ: https://ru.files.fm/down.php?i=njkuubrw4z\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–º—ã–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º —É—Å–ª—É–≥–∞–º).\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3000):",
            reply_markup=behavior_kb
        )
        await state.set_state(OrderStates.waiting_for_behavior_score)

@dp.message(StateFilter(OrderStates.waiting_for_behavior_score))
async def process_behavior_score(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏")
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12000).", reply_markup=behavior_kb)
        return
    try:
        behavior_score = int(message.text)
        if behavior_score < 0 or behavior_score > 12000:
            raise ValueError
        total_price = get_behavior_price(behavior_score)
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mmr_from, mmr_to, mode, price) VALUES (?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, behavior_score, 10000, "behavior_score", total_price)
            )
            db.commit()
            order_id = cursor.lastrowid
        
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å: {behavior_score} ‚Üí 10000\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price),
            reply_markup_keyboard=payment_navigation_kb
        )
        
        await state.update_data(order_id=order_id)
        await state.set_state(PaymentStates.waiting_for_payment_method)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12000).", reply_markup=behavior_kb)
        return

# ================== –û–¢–´–ì–†–´–® –ß–ê–°–û–í ==================
@dp.message(F.text == "‚è± –û—Ç—ã–≥—Ä—ã—à —á–∞—Å–æ–≤")
async def order_hours(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–∫–∞–∑ –æ—Ç—ã–≥—Ä—ã—à–∞ —á–∞—Å–æ–≤")
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç—ã–≥—Ä–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):", reply_markup=hours_kb)
    await state.set_state(OrderStates.waiting_for_hours)

@dp.message(StateFilter(OrderStates.waiting_for_hours))
async def process_hours(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).", reply_markup=hours_kb)
        return
    try:
        hours = int(message.text)
        if hours < 1:
            raise ValueError
        total_price = get_hours_price(hours)
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mode, games, price) VALUES (?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, "hours", hours, total_price)
            )
            db.commit()
            order_id = cursor.lastrowid
        
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–û—Ç—ã–≥—Ä—ã—à —á–∞—Å–æ–≤: {hours} —á\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price),
            reply_markup_keyboard=payment_navigation_kb
        )
        
        await state.update_data(order_id=order_id)
        await state.set_state(PaymentStates.waiting_for_payment_method)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).", reply_markup=hours_kb)
        return

# ================== –ö–ê–õ–ò–ë–†–û–í–ö–ê ==================
@dp.message(F.text == "üéì –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞")
async def order_calibration(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–∫–∞–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=mmr_kb)
    await state.set_state(OrderStates.waiting_for_calibration_mmr)

@dp.message(StateFilter(OrderStates.waiting_for_calibration_mmr))
async def process_calibration_mmr(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω MMR –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000).", reply_markup=mmr_kb)
        return
    try:
        mmr = int(message.text)
        if mmr < 1 or mmr > 13000:
            raise ValueError
        await state.update_data(mmr_from=mmr)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):", reply_markup=confidence_kb)
        await state.set_state(OrderStates.waiting_for_calibration_confidence)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000).", reply_markup=mmr_kb)
        return

@dp.message(StateFilter(OrderStates.waiting_for_calibration_confidence))
async def process_calibration_confidence(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=mmr_kb)
        await state.set_state(OrderStates.waiting_for_calibration_mmr)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).", reply_markup=confidence_kb)
        return
    try:
        confidence = int(message.text)
        if confidence < 0 or confidence > 100:
            raise ValueError
        
        total_games = 15  # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å–µ–≥–¥–∞ 15 –∏–≥—Ä
        total_price = 1500  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        initial_confidence = 7  # –ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞–¥–∞–µ—Ç –¥–æ 7%
        
        data = await state.get_data()
        mmr = data["mmr_from"]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        games_remaining, current_confidence = calculate_calibration_progress(confidence)
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mode, mmr_from, games, price, confidence) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, "calibration", mmr, total_games, total_price, confidence)
            )
            db.commit()
            order_id = cursor.lastrowid
        
        progress_text = (
            f"–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∑–∏—Ç—Å—è –¥–æ {initial_confidence}%.\n"
            f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 30%.\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {current_confidence}%\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä: {games_remaining}\n"
        )
        
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: 15 –∏–≥—Ä\n"
            f"MMR: {mmr}\n"
            f"{progress_text}\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price),
            reply_markup_keyboard=payment_navigation_kb
        )
        
        await state.update_data(order_id=order_id)
        await state.set_state(PaymentStates.waiting_for_payment_method)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).", reply_markup=confidence_kb)
        return

# ================== –ö–û–£–ß–ò–ù–ì ==================
@dp.message(F.text == "üë®‚Äçüè´ –ö–æ—É—á–∏–Ω–≥")
async def order_coaching(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–∫–∞–∑ –∫–æ—É—á–∏–Ω–≥–∞")
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∫–æ—É—á–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):", reply_markup=coaching_kb)
    await state.set_state(OrderStates.waiting_for_coaching_hours)

@dp.message(StateFilter(OrderStates.waiting_for_coaching_hours))
async def process_coaching_hours(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∫–æ—É—á–∏–Ω–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).", reply_markup=coaching_kb)
        return
    try:
        hours = int(message.text)
        if hours < 1:
            raise ValueError
        total_price = get_coaching_price(hours)
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO orders (user_id, username, mode, games, price) VALUES (?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, "coaching", hours, total_price)
            )
            db.commit()
            order_id = cursor.lastrowid
        
        await message.answer(
            f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"–ö–æ—É—á–∏–Ω–≥: {hours} —á\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=get_payment_methods_keyboard(order_id, total_price),
            reply_markup_keyboard=payment_navigation_kb
        )
        
        await state.update_data(order_id=order_id)
        await state.set_state(PaymentStates.waiting_for_payment_method)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).", reply_markup=coaching_kb)
        return

# ================== –ë–û–ï–í–û–ô –ö–£–ë–û–ö ==================
@dp.message(F.text == "üèÜ –ë–æ–µ–≤–æ–π –∫—É–±–æ–∫")
async def order_battle_cup(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–∫–∞–∑ –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=mode_kb)
    await state.set_state(OrderStates.waiting_for_battle_cup_mode)

@dp.message(StateFilter(OrderStates.waiting_for_battle_cup_mode))
async def process_battle_cup_mode(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –¥–ª—è –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    if message.text not in ["–°–æ–ª–æ", "–ü–∞—Ç–∏"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (–°–æ–ª–æ/–ü–∞—Ç–∏) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.", reply_markup=mode_kb)
        return
    mode = message.text.lower()
    await state.update_data(mode=mode)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏—Ä (3-8) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=tier_kb)
    await state.set_state(OrderStates.waiting_for_battle_cup_tier)

@dp.message(StateFilter(OrderStates.waiting_for_battle_cup_tier))
async def process_battle_cup_tier_by_mmr(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω MMR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=mode_kb)
        await state.set_state(OrderStates.waiting_for_battle_cup_mode)
        return
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä (3-8).", reply_markup=tier_kb)
        return
    try:
        mmr = int(message.text)
        if mmr < 1 or mmr > 13000:
            raise ValueError
        tier = determine_tier(mmr)
        data = await state.get_data()
        mode = data["mode"]
        total_price = get_battle_cup_price(tier, mode)
        
        await state.update_data(mmr=mmr, tier=tier, total_price=total_price)
        
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"–ë–æ–µ–≤–æ–π –∫—É–±–æ–∫: —É—á–∞—Å—Ç–∏–µ\n"
            f"–†–µ–∂–∏–º: {'–°–æ–ª–æ' if mode == 'solo' else '–ü–∞—Ç–∏'}\n"
            f"–¢–∏—Ä: {tier}\n"
            f"MMR: {mmr}\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
            reply_markup=confirm_battle_cup_kb
        )
        await state.set_state(OrderStates.waiting_for_battle_cup_confirmation)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 13000).", reply_markup=tier_kb)
        return

@dp.message(StateFilter(OrderStates.waiting_for_battle_cup_tier), F.text.regexp(r'^(3|4|5|6|7|8)$'))
async def process_battle_cup_tier_direct(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω —Ç–∏—Ä –¥–ª—è –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=mode_kb)
        await state.set_state(OrderStates.waiting_for_battle_cup_mode)
        return
    try:
        tier = int(message.text)
        if tier < 3 or tier > 8:
            raise ValueError
        data = await state.get_data()
        mode = data["mode"]
        total_price = get_battle_cup_price(tier, mode)
        
        await state.update_data(tier=tier, total_price=total_price)
        
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"–ë–æ–µ–≤–æ–π –∫—É–±–æ–∫: —É—á–∞—Å—Ç–∏–µ\n"
            f"–†–µ–∂–∏–º: {'–°–æ–ª–æ' if mode == 'solo' else '–ü–∞—Ç–∏'}\n"
            f"–¢–∏—Ä: {tier}\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
            reply_markup=confirm_battle_cup_kb
        )
        await state.set_state(OrderStates.waiting_for_battle_cup_confirmation)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏—Ä (—á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 8).", reply_markup=tier_kb)
        return

@dp.message(StateFilter(OrderStates.waiting_for_battle_cup_confirmation))
async def confirm_battle_cup_order(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞: {message.text}")
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏—Ä (3-8) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):", reply_markup=tier_kb)
        await state.set_state(OrderStates.waiting_for_battle_cup_tier)
        return
    
    if message.text != "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", reply_markup=confirm_battle_cup_kb)
        return
    
    data = await state.get_data()
    mode = data["mode"]
    tier = data["tier"]
    total_price = data["total_price"]
    mmr = data.get("mmr", None)
    
    with get_db() as db:
        cursor = db.cursor()
        if mmr:
            cursor.execute(
                "INSERT INTO orders (user_id, username, mode, mmr_from, price, tier) VALUES (?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, f"battle_cup_{mode}", mmr, total_price, tier)
            )
        else:
            cursor.execute(
                "INSERT INTO orders (user_id, username, mode, price, tier) VALUES (?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, f"battle_cup_{mode}", total_price, tier)
            )
        db.commit()
        order_id = cursor.lastrowid
    
    mmr_text = f"MMR: {mmr}\n" if mmr else ""
    await message.answer(
        f"üõí <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω</b>\n\n"
        f"–ë–æ–µ–≤–æ–π –∫—É–±–æ–∫: —É—á–∞—Å—Ç–∏–µ\n"
        f"–†–µ–∂–∏–º: {'–°–æ–ª–æ' if mode == 'solo' else '–ü–∞—Ç–∏'}\n"
        f"–¢–∏—Ä: {tier}\n"
        f"{mmr_text}"
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_price:.2f} —Ä—É–±.</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:",
        reply_markup=get_payment_methods_keyboard(order_id, total_price),
        reply_markup_keyboard=payment_navigation_kb
    )
    
    await state.update_data(order_id=order_id)
    await state.set_state(PaymentStates.waiting_for_payment_method)

# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã ==================
@dp.message(StateFilter(PaymentStates.waiting_for_payment_method), F.text == "–ù–∞–∑–∞–¥")
async def cancel_order_on_payment(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã")
    data = await state.get_data()
    order_id = data.get("order_id")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("DELETE FROM orders WHERE id = ?", (order_id,))
        db.commit()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    mode = data.get("mode") or ""  # <-- —Ç–µ–ø–µ—Ä—å mode –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
    
    if "battle_cup" in mode:
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏—Ä (3-8) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3500):",
            reply_markup=tier_kb
        )
        await state.set_state(OrderStates.waiting_for_battle_cup_tier)
    elif mode == "behavior_score":
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3000):",
            reply_markup=behavior_kb
        )
        await state.set_state(OrderStates.waiting_for_behavior_score)
    elif mode == "hours":
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç—ã–≥—Ä–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):",
            reply_markup=hours_kb
        )
        await state.set_state(OrderStates.waiting_for_hours)
    elif mode == "calibration":
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):",
            reply_markup=confidence_kb
        )
        await state.set_state(OrderStates.waiting_for_calibration_confidence)
    elif mode == "coaching":
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∫–æ—É—á–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):",
            reply_markup=coaching_kb
        )
        await state.set_state(OrderStates.waiting_for_coaching_hours)
    elif mode == "solo":
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–∞–±–ª –¥–∞—É–Ω–æ–≤? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ—Ç):",
            reply_markup=doubles_kb
        )
        await state.set_state(OrderStates.waiting_for_doubles)
    elif mode == "party":
        mmr_to = data.get("mmr_to")
        if mmr_to:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–≤–µ–ª mmr_to, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –¥–∞–±–ª–æ–≤
            await message.answer(
                "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–∞–±–ª –¥–∞—É–Ω–æ–≤? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5, –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ—Ç):",
                reply_markup=doubles_kb
            )
            await state.set_state(OrderStates.waiting_for_doubles)
        else:  # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–±–ª–æ–≤
            await message.answer(
                "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–±–ª –¥–∞—É–Ω—ã? (–î–∞/–ù–µ—Ç)",
                reply_markup=yes_no_kb
            )
            await state.set_state(OrderStates.waiting_for_doubles_choice)
    else:
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_kb
        )
        await state.clear()

# ================== –°–ò–°–¢–ï–ú–ê –û–ü–õ–ê–¢–´ ==================
@dp.callback_query(F.data.startswith("pay_"))
async def process_payment_method(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {callback.data}")
    method = callback.data.split("_")[1]
    order_id = callback.data.split("_")[2]
    total_price = float(callback.data.split("_")[3])
    
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
        order = cursor.fetchone()
    
    await state.update_data(order_id=order_id, amount=total_price)
    
    if method == "stars":
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"–ë—É—Å—Ç MMR #{order_id}",
            description=f"MMR: {order['mmr_from']} ‚Üí {order['mmr_to']}\n–†–µ–∂–∏–º: {'–°–æ–ª–æ' if order['mode'] == 'solo' else '–ü–∞—Ç–∏'}\n–ò–≥—Ä—ã: {order['games']}",
            payload=f"order_{order_id}",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label="–ë—É—Å—Ç", amount=int(total_price))],
            need_email=False,
            need_phone_number=False,
            send_email_to_provider=False,
            send_phone_number_to_provider=False
        )
        await callback.message.delete()
    
    else:
        payment_id = generate_payment_id()
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute(
                "INSERT INTO payments (id, order_id, user_id, amount, method) VALUES (?, ?, ?, ?, ?)",
                (payment_id, order_id, callback.from_user.id, total_price, method)
            )
            db.commit()
        
        if method == "card":
            card_number = "2200 7017 2578 8654"
            card_holder = "–î–∞–Ω–∏–ª"
            payment_data = f"{card_number}|{card_holder}"
            
            with get_db() as db:
                cursor = db.cursor()
                cursor.execute("UPDATE payments SET payment_data = ? WHERE id = ?", (payment_data, payment_id))
                db.commit()
            
            confirm_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_{payment_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{payment_id}")],
                ]
            )
            
            await callback.message.edit_text(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É</b>\n\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>{card_number}</code>\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {card_holder}\n\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_price} —Ä—É–±.</b>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
                reply_markup=confirm_kb
            )
        
        elif method == "crypto":
            wallet_address = "TS8JHytwXpsS2NZ1TRVnkqFxQqCZUkLQPP"
            payment_data = wallet_address
            
            with get_db() as db:
                cursor = db.cursor()
                cursor.execute("UPDATE payments SET payment_data = ? WHERE id = ?", (payment_data, payment_id))
                db.commit()
            
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(wallet_address)
            qr.make(fit=True)
            img = qr.make_image(fill_color="black", back_color="white")
            bio = BytesIO()
            bio.name = 'qr.png'
            img.save(bio, 'PNG')
            bio.seek(0)
            
            qr_message = await callback.message.answer_photo(
                photo=types.BufferedInputFile(bio.getvalue(), filename='qr.png'),
                caption=f"üí∞ <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (USDT TRC20)</b>\n\n"
                       f"–ê–¥—Ä–µ—Å: <code>{wallet_address}</code>\n\n"
                       f"–°—É–º–º–∞: <b>{total_price} —Ä—É–±.</b> (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT)\n\n"
                       f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª"
            )
            
            confirm_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_{payment_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{payment_id}")],
                ]
            )
            
            await callback.message.edit_text(
                f"üí∞ <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (USDT TRC20)</b>\n\n"
                f"QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.\n"
                f"–ê–¥—Ä–µ—Å: <code>{wallet_address}</code>\n\n"
                f"–°—É–º–º–∞: <b>{total_price} —Ä—É–±.</b> (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT)\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
                reply_markup=confirm_kb
            )
        
        elif method == "qiwi":
            qiwi_number = "+79123456789"
            payment_data = qiwi_number
            
            with get_db() as db:
                cursor = db.cursor()
                cursor.execute("UPDATE payments SET payment_data = ? WHERE id = ?", (payment_data, payment_id))
                db.commit()
            
            confirm_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_{payment_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{payment_id}")],
                ]
            )
            
            await callback.message.edit_text(
                f"üì± <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QIWI</b>\n\n"
                f"–ù–æ–º–µ—Ä QIWI: <code>{qiwi_number}</code>\n\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_price} —Ä—É–±.</b>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª",
                reply_markup=confirm_kb
            )
        
        elif method == "other":
            admin_username = "levin729"
            await callback.message.edit_text(
                f"ü§ù <b>–î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username} –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.\n\n"
                f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>#{order_id}</b>\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_price} —Ä—É–±.</b>"
            )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {callback.data}")
    payment_id = callback.data.split("_")[1]
    
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM payments WHERE id = ?", (payment_id,))
        payment = cursor.fetchone()
    
    await callback.message.edit_text(
        "üì∏ <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    
    await state.set_state(PaymentStates.waiting_for_screenshot)
    await state.update_data(payment_id=payment_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã: {callback.data}")
    payment_id = callback.data.split("_")[1]
    
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM payments WHERE id = ?", (payment_id,))
        payment = cursor.fetchone()
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM payments WHERE id = ?", (payment_id,))
        payment = cursor.fetchone()
        cursor.execute("SELECT * FROM orders WHERE id = ?", (payment['order_id'],))
        order = cursor.fetchone()
        
        cursor.execute("UPDATE payments SET status = 'cancelled' WHERE id = ?", (payment_id,))
        cursor.execute("DELETE FROM orders WHERE id = ?", (order['id'],))
        db.commit()
    
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']} —É–¥–∞–ª–µ–Ω.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã–±—Ä–∞–≤ ¬´–ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç¬ª."
    )
    
    await state.clear()
    await callback.answer()

@dp.message(F.photo, PaymentStates.waiting_for_screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    payment_id = data.get("payment_id")
    order_id = data.get("order_id")
    
    file_id = message.photo[-1].file_id
    
    with get_db() as db:
        cursor = db.cursor()
        cursor.execute("UPDATE payments SET screenshot_file_id = ?, status = 'verification' WHERE id = ?", 
                      (file_id, payment_id))
        cursor.execute("SELECT * FROM payments WHERE id = ?", (payment_id,))
        payment = cursor.fetchone()
        cursor.execute("SELECT * FROM orders WHERE id = ?", (payment['order_id'],))
        order = cursor.fetchone()
        db.commit()
    
    await message.answer(
        "‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω</b>\n\n"
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. "
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? (–î–∞/–ù–µ—Ç)",
        reply_markup=yes_no_kb
    )
    
    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=file_id,
        caption=f"üÜï <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n\n"
                f"ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_id}</code>\n"
                f"–ó–∞–∫–∞–∑: #{order['id']}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} ({message.from_user.id})\n"
                f"–ú–µ—Ç–æ–¥: {payment['method']}\n"
                f"–°—É–º–º–∞: {payment['amount']} —Ä—É–±.\n"
                f"–î–∞—Ç–∞: {payment['created_at']}"
    )
    
    admin_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{payment_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{payment_id}")],
        ]
    )
    
    await bot.send_message(
        chat_id=ADMIN_ID,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –µ–≥–æ.",
        reply_markup=admin_kb
    )
    
    await state.set_state(None)

@dp.message(PaymentStates.waiting_for_screenshot, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_review_option(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–í—ã–±–æ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    if message.text == "–î–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–†–µ–π—Ç–∏–Ω–≥ (1-5) | –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</code>\n–ü—Ä–∏–º–µ—Ä: <code>5 | –û—Ç–ª–∏—á–Ω—ã–π –±—É—Å—Ç, –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!</code>")
        await state.set_state(None)
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        await state.clear()

@dp.message(F.text.regexp(r'^\d\s*\|\s*.+'))
async def process_review(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤")
    try:
        user_id = message.from_user.id
        rating, text = message.text.split("|", 1)
        rating = int(rating.strip())
        text = text.strip()
        
        if not 1 <= rating <= 5:
            await message.answer("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return
        
        with get_db() as db:
            cursor = db.cursor()
            cursor.execute("SELECT * FROM orders WHERE user_id = ? AND payment_status = 'paid' ORDER BY created_at DESC LIMIT 1", (user_id,))
            order = cursor.fetchone()
            if not order:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                return
            
            cursor.execute(
                "INSERT INTO reviews (user_id, username, text, rating, order_id) VALUES (?, ?, ?, ?, ?)",
                (user_id, message.from_user.username, text, rating, order['id'])
            )
            db.commit()
        
        await message.answer("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_kb)
        await bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}/5\n"
            f"–¢–µ–∫—Å—Ç: {text}"
        )
    except Exception as e:
        logging.error(f"Error processing review: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ================== –û–¢–õ–ê–î–ö–ê –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ==================
@dp.message()
async def catch_all(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    log_user_action(message.from_user, f"Catch-all: Message '{message.text}' from user {message.from_user.id}, current state: {current_state}")
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main()...")
    try:
        update_db_schema()
        update_payment_table()
        logging.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")