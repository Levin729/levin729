from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from bot.utils import log_user_action
from bot.keyboards import (
    get_mode_kb, get_yes_no_kb, get_mmr_kb, get_doubles_kb, 
    get_behavior_kb, get_hours_kb, get_coaching_kb, get_tier_kb, 
    get_confidence_kb, get_confirm_battle_cup_kb, get_service_kb,
    get_main_kb
)
from bot.states import OrderStates
from bot.price import (
    calculate_boost_price, get_behavior_price, get_hours_price, 
    get_coaching_price, get_battle_cup_price, determine_tier, 
    calculate_calibration_progress, calculate_calibration_price
)

router = Router()

@router.message(lambda message: message.text == "üéØ –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç")
async def handle_order_boost(message: types.Message, state: FSMContext):
    log_user_action(message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_service_kb()
    )
    await state.set_state(OrderStates.waiting_for_service)

@router.message(OrderStates.waiting_for_service)
async def handle_service_selection(message: types.Message, state: FSMContext):
    service = message.text
    if service not in ["MMR Boost", "Behavior Score", "Hours Played", "Calibration", "Coaching", "Battle Cup"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(service=service)
    
    if service == "MMR Boost":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:", reply_markup=get_mode_kb())
        await state.set_state(OrderStates.waiting_for_mode)
    elif service == "Behavior Score":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π Behavior Score:", reply_markup=get_behavior_kb())
        await state.set_state(OrderStates.waiting_for_behavior_score)
    elif service == "Hours Played":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –æ—Ç—ã–≥—Ä—ã—à–∞:", reply_markup=get_hours_kb())
        await state.set_state(OrderStates.waiting_for_hours)
    elif service == "Calibration":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR:", reply_markup=get_mmr_kb())
        await state.set_state(OrderStates.waiting_for_calibration_mmr)
    elif service == "Coaching":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∫–æ—É—á–∏–Ω–≥–∞:", reply_markup=get_coaching_kb())
        await state.set_state(OrderStates.waiting_for_coaching_hours)
    elif service == "Battle Cup":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=get_mode_kb())
        await state.set_state(OrderStates.waiting_for_battle_cup_mode)

# MMR Boost Flow
@router.message(OrderStates.waiting_for_mode)
async def handle_mode(message: types.Message, state: FSMContext):
    if message.text not in ["–°–æ–ª–æ", "–ü–∞—Ç–∏"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(mode=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR:", reply_markup=get_mmr_kb())
    await state.set_state(OrderStates.waiting_for_mmr_from)

@router.message(OrderStates.waiting_for_mmr_from)
async def handle_mmr_from(message: types.Message, state: FSMContext):
    try:
        mmr = int(message.text)
        if mmr < 1:
            await message.answer("MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(mmr_from=mmr)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π MMR:", reply_markup=get_mmr_kb())
        await state.set_state(OrderStates.waiting_for_mmr_to)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_mmr_to)
async def handle_mmr_to(message: types.Message, state: FSMContext):
    try:
        mmr = int(message.text)
        data = await state.get_data()
        if mmr <= data['mmr_from']:
            await message.answer("–ñ–µ–ª–∞–µ–º—ã–π MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ.")
            return
        await state.update_data(mmr_to=mmr)
        await message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥—ã?", reply_markup=get_yes_no_kb())
        await state.set_state(OrderStates.waiting_for_doubles_choice)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_doubles_choice)
async def handle_doubles_choice(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return
    if message.text == "–î–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–æ–π–Ω—ã—Ö –∑–≤–µ–∑–¥:", reply_markup=get_doubles_kb())
        await state.set_state(OrderStates.waiting_for_doubles)
    else:
        await state.update_data(doubles_available=0)
        await handle_mmr_boost_completion(message, state)

@router.message(OrderStates.waiting_for_doubles)
async def handle_doubles(message: types.Message, state: FSMContext):
    try:
        doubles = int(message.text)
        if doubles < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–π–Ω—ã—Ö –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        await state.update_data(doubles_available=doubles)
        await handle_mmr_boost_completion(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def handle_mmr_boost_completion(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price = calculate_boost_price(
        data['mmr_from'],
        data['mmr_to'],
        data['mode'],
        data.get('doubles_available', 0)
    )
    await message.answer(
        f"–ó–∞–∫–∞–∑ MMR –±—É—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
        f"–†–µ–∂–∏–º: {data['mode']}\n"
        f"–û—Ç {data['mmr_from']} –¥–æ {data['mmr_to']} MMR\n"
        f"–î–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥—ã: {data.get('doubles_available', 0)}\n"
        f"–¶–µ–Ω–∞: {price} —Ä—É–±."
    )
    await state.clear()

# Behavior Score Flow
@router.message(OrderStates.waiting_for_behavior_score)
async def handle_behavior_score(message: types.Message, state: FSMContext):
    try:
        score = int(message.text)
        if score < 0 or score > 10000:
            await message.answer("Behavior Score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10000.")
            return
        price = get_behavior_price(score)
        await message.answer(
            f"–ó–∞–∫–∞–∑ —É–ª—É—á—à–µ–Ω–∏—è Behavior Score –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"–¢–µ–∫—É—â–∏–π BS: {score}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# Hours Played Flow
@router.message(OrderStates.waiting_for_hours)
async def handle_hours(message: types.Message, state: FSMContext):
    try:
        hours = int(message.text)
        if hours <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        price = get_hours_price(hours)
        await message.answer(
            f"–ó–∞–∫–∞–∑ –æ—Ç—ã–≥—Ä—ã—à–∞ —á–∞—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# Coaching Flow
@router.message(OrderStates.waiting_for_coaching_hours)
async def handle_coaching_hours(message: types.Message, state: FSMContext):
    try:
        hours = int(message.text)
        if hours < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        price = get_coaching_price(hours)
        await message.answer(
            f"–ó–∞–∫–∞–∑ –∫–æ—É—á–∏–Ω–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# Battle Cup Flow
@router.message(OrderStates.waiting_for_battle_cup_mode)
async def handle_battle_cup_mode(message: types.Message, state: FSMContext):
    if message.text not in ["–°–æ–ª–æ", "–ü–∞—Ç–∏"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(battle_cup_mode=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=get_tier_kb())
    await state.set_state(OrderStates.waiting_for_battle_cup_tier)

@router.message(OrderStates.waiting_for_battle_cup_tier)
async def handle_battle_cup_tier(message: types.Message, state: FSMContext):
    try:
        tier = int(message.text)
        if tier not in [3, 4, 5, 6, 7, 8]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        data = await state.get_data()
        price = get_battle_cup_price(tier, data['battle_cup_mode'])
        await message.answer(
            f"–ó–∞–∫–∞–∑ –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"–†–µ–∂–∏–º: {data['battle_cup_mode']}\n"
            f"–¢–∏—Ä: {tier}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# Calibration Flow
@router.message(OrderStates.waiting_for_calibration_mmr)
async def handle_calibration_mmr(message: types.Message, state: FSMContext):
    try:
        mmr = int(message.text)
        if mmr < 1:
            await message.answer("MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(calibration_mmr=mmr)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:", reply_markup=get_confidence_kb())
        await state.set_state(OrderStates.waiting_for_calibration_confidence)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_calibration_confidence)
async def handle_calibration_confidence(message: types.Message, state: FSMContext):
    try:
        confidence = int(message.text)
        if confidence < 0 or confidence > 100:
            await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
            return
        data = await state.get_data()
        mmr = data['calibration_mmr']
        games_remaining, current_confidence = calculate_calibration_progress(confidence)
        price = calculate_calibration_price(games_remaining, mmr)
        await message.answer(
            f"–ó–∞–∫–∞–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n"
            f"MMR: {mmr}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä: {games_remaining}\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {current_confidence}%\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def handle_back_button(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    
    if current_state == OrderStates.waiting_for_service.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_kb())
        await state.clear()
        return True
    
    if current_state == OrderStates.waiting_for_mode.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_mmr_from.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±—É—Å—Ç–∞:", reply_markup=get_mode_kb())
        await state.set_state(OrderStates.waiting_for_mode)
        return True
    
    if current_state == OrderStates.waiting_for_mmr_to.state:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR:", reply_markup=get_mmr_kb())
        await state.set_state(OrderStates.waiting_for_mmr_from)
        return True
    
    if current_state == OrderStates.waiting_for_doubles_choice.state:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π MMR:", reply_markup=get_mmr_kb())
        await state.set_state(OrderStates.waiting_for_mmr_to)
        return True
    
    if current_state == OrderStates.waiting_for_doubles.state:
        await message.answer("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥—ã?", reply_markup=get_yes_no_kb())
        await state.set_state(OrderStates.waiting_for_doubles_choice)
        return True
    
    if current_state == OrderStates.waiting_for_behavior_score.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_hours.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_coaching_hours.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_battle_cup_mode.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_battle_cup_tier.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –±–æ–µ–≤–æ–≥–æ –∫—É–±–∫–∞:", reply_markup=get_mode_kb())
        await state.set_state(OrderStates.waiting_for_battle_cup_mode)
        return True
    
    if current_state == OrderStates.waiting_for_calibration_mmr.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_service_kb())
        await state.set_state(OrderStates.waiting_for_service)
        return True
    
    if current_state == OrderStates.waiting_for_calibration_confidence.state:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π MMR:", reply_markup=get_mmr_kb())
        await state.set_state(OrderStates.waiting_for_calibration_mmr)
        return True
    
    return False

async def handle_main_menu_button(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_kb())
    await state.clear()
    return True

@router.message(lambda message: message.text in ["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
async def handle_navigation(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        if await handle_back_button(message, state):
            return
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if await handle_main_menu_button(message, state):
            return 